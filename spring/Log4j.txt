===============================구	조==========================================

Logger
 출력할 메시지를 Appender에 전달한다.
Appender
 전달된 로그를 어디에 출력할 지 결정한다. (콘솔 출력, 파일 기록, DB 저장 등)
Layout
 로그를 어떤 형식으로 출력할 지 결정한다.

====================================================================================

==============================로 그  레 벨==========================================

FATAL
 아주 심각한 에러가 발생한 상태를 나타낸다. 
ERROR
 어떠한 요청을 처리하는 중 문제가 발생한 상태를 나타낸다. 
WARN
 프로그램의 실행에는 문제가 없지만, 향후 시스템 에러의 원인이 될수 있는 경고성 메시  지를 나타낸다.
INFO
 어떠한 상태변경과 같은 정보성 메시지를 나타낸다. 
DEBUG
 개발시 디버그 용도로 사용하는 메시지를 나타낸다. 
TRACE
 디버그 레벨이 너무 광범위한것을 해결하기 위해서 좀 더 상세한 이벤트를 나타낸다.

====================================================================================

================================log4j.xml===========================================

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
 
    <!-- Appenders -->
    <appender name="console" class="org.apache.log4j.ConsoleAppender">
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %5p [%c] %m%n" />
        </layout>   
    </appender>
     
    <appender name="console-infolog" class="org.apache.log4j.ConsoleAppender">
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %5p %m%n" />
        </layout>   
    </appender>
     
    <!-- Application Loggers -->
    <logger name="first" additivity="false">
        <level value="debug" />
        <appender-ref ref="console"/>
    </logger>
     
    <!-- Query Loggers -->
    <logger name="jdbc.sqlonly" additivity="false">  
        <level value="INFO"/>  
        <appender-ref ref="console-infolog"/>  
    </logger>
     
    <logger name="jdbc.resultsettable" additivity="false">  
        <level value="INFO"/>  
        <appender-ref ref="console"/>  
    </logger>  
 
    <!-- Root Logger -->
    <root>
        <priority value="off"/>
        <appender-ref ref="console" />
    </root>
     
</log4j:configuration>

====================================================================================

===================================web.xml==========================================

<listener>
	<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
</listener>
<context-param>
	<param-name>log4jConfigLocation</param-name>
	<param-value>file:///${SMART_HOME}/conf/server/log4j.xml</param-value>
</context-param>
<context-param>
	<param-name>log4jRefreshInterval</param-name>
	<param-value>60000</param-value>
</context-param>

====================================================================================

====================================사 용 법========================================

protected Log log = LogFactory.getLog(LoggerInterceptor.class);

log.debug("sdfsfsf");
====================================================================================
